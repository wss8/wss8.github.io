<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++11 中的类型推导</title>
      <link href="2020/12/22/c-11-zhong-de-lei-xing-tui-dao/"/>
      <url>2020/12/22/c-11-zhong-de-lei-xing-tui-dao/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-1、auto、decltype"><a href="#1-1、auto、decltype" class="headerlink" title="1.1、auto、decltype"></a>1.1、auto、decltype</h2><p><strong>auto的基本使用</strong></p><ul><li>在C++11之前，auto关键字是栈变量的默认修饰符</li><li>C++11 使用 auto 和 decltype 这两个关键字实现类型推导，让编译器来推导变量的类型</li><li>C++11中auto是一种类型占位符，编译器可以从初始化式中推断出变量的实际类型(使用模板参数推导规则推导类型）<ul><li><code>auto a = 10;  auto b = a; auto c = 1.0; auto* p = &amp;a; auto&amp; r = a; </code></li></ul></li><li>auto 定义时变量时必须初始化（保证了类型安全），auto不能定义数组，不能作为模板参数。<ul><li><code>auto a; auto c[2] = {0}; vector&lt;auto&gt; vec;</code></li></ul></li><li>在类中，auto必须配合static定义变量，且必须初始化<ul><li><code>static const auto i = 10 </code>（有初始值的静态数据成员必须为const）</li></ul></li><li>C++11 auto不允许用作函数参数与返回值类型，C++14才允许auto用于函数返回值并会被推导，C++14的lambda函数允许在形参中使用auto<ul><li><code>auto func() { &nbsp;return 0; }</code></li><li><code>auto f = [](auto a, auto b){return a + b;};</code></li></ul></li><li>auto推导规则<ul><li>使用auto定义的变量为指针或引用时，会保留右操作数的cv属性（const、volatile）<ul><li><code>const auto a = 10; auto&amp; b = a; // b为const int&amp; </code></li></ul></li><li>使用auto定义的变量为非指针或非引用时，会忽略右操作数的cv属性<ul><li><code>const auto a = 10; auto b = a; // b为int </code>  </li></ul></li></ul></li></ul><p><strong>decltype 的基本使用</strong></p><ul><li>decltype (&nbsp;entity&nbsp;) 、 decltype (&nbsp;expression&nbsp;)<ul><li>从表达式的类型或变量的类型推断出要定义的变量的类型（关于表达式的两种属性：类型和值类别前文已有介绍）</li><li><code>int x = 10; decltype(x) y1;</code></li></ul></li><li>decltype总是不加修改的产生变量或者表达式的类型，即保留表达式的cv属性与引用<ul><li><code>cont int &amp;a= 1;  decltype(a) b = 1; // b类型：const int&amp; </code></li></ul></li><li>decltype推导不同表达式会有不同的类型<ul><li>当表达式值类别为 lvalue表达式，decltype会推出T的引用，即T&amp;<ul><li><code>int x = 10; decltype((x)) y2; // (x)是lvalue表达式，y2类型为int&amp;，必须初始化，所以这里会报错</code></li></ul></li><li>当表达式值类别为 prvalue表达式，decltype会推出T的引用，即T<ul><li><code>int a = 10; int b = 10; decltype(a + b) y1; decltype(a+=b) y2 = y1;// 类型分别为int和int&amp;</code></li></ul></li><li>当表达式值类别为 xvalue表达式，decltype会推出T的引用，即T&amp;&amp;<ul><li><code>decltype(std::move(Test())) x = Test(); // std::move(Test())是xvalue表达式，所以x类型为Test&amp;&amp;</code></li></ul></li></ul></li><li>尾置返回类型（trailing return type）<ul><li>参数列表后面使用 -&gt; 指出函数的返回类型， 参数前使用auto仅仅占位，没有功能。为什么要后置？因为decltype(x) 如果放前面，参数还没定义</li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"test()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> cx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> crx <span class="token operator">=</span> cx<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> cpx <span class="token operator">=</span> <span class="token operator">&amp;</span>cx<span class="token punctuation">;</span>    <span class="token keyword">auto</span> x1 <span class="token operator">=</span> cx<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// x1: int           </span>    <span class="token keyword">auto</span><span class="token operator">&amp;</span> x2 <span class="token operator">=</span> cx<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x2: const int ，保留cv属性     </span>    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> x3 <span class="token operator">=</span> cx<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// x3: const int&amp;, 保留cv属性   </span>    <span class="token keyword">auto</span> x4 <span class="token operator">=</span> crx<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x4：int           </span>    <span class="token keyword">auto</span> x5 <span class="token operator">=</span> cpx<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x5：const int*，*cpx的const属性会保留，而修饰cpx的const被忽略              </span>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ok</span>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ok</span>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span> d_cx <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// const int</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span>crx<span class="token punctuation">)</span> d_crx <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const int&amp;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// int   </span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> i2 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// int&amp;  lvalue表达式</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> i3 <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// int&amp;, lvalue表达式</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> i4 <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// int&amp;, lvalue表达式，不会执行 i = 20，</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span>i3 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> i5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// int , rvalue表达式</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// int , lvalue表达式, 编译期间推断，不会执行函数</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> f1<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int (void), 函数类型，不是函数指针</span>    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>is_same<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span>    function<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token operator">></span> f2 <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  可调用对象</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// C++ 11之前的写法</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T1<span class="token punctuation">,</span> <span class="token keyword">typename</span> T2<span class="token punctuation">,</span> <span class="token keyword">typename</span> T3<span class="token operator">></span>T1 <span class="token function">Add</span><span class="token punctuation">(</span>T2 a<span class="token punctuation">,</span> T3 b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>T1<span class="token operator">></span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// C++ 11之后的写法</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> Y<span class="token operator">></span><span class="token keyword">decltype</span><span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>T v1<span class="token punctuation">,</span> Y v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> U<span class="token operator">></span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>U<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// decltype(expr) 表达式并不会执行，所以不会异常</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> U<span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>t <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// c++14 支持下面写法</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> U<span class="token operator">></span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> U u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t <span class="token operator">+</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要使用 decltype(auto)?</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// C++14</span><span class="token keyword">auto</span> <span class="token function">beTen</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 相当于 auto ret = i;    期望auto被推导为int&amp;, 但实际为int </span>    <span class="token comment" spellcheck="true">// 使用auto&amp;可以解决，auto&amp; ret = i; 但不够便捷</span>    <span class="token comment" spellcheck="true">// 使用decltype(auto)可以原封不动返回i的类型(auto代表返回值会要类型推导，decltype代表不加修改)</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//beTen(i) = 20;</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// decltype(auto) 大大较少代码量</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//typename T::iterator m_iter;</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> m_iter<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const类型，返回常量迭代器，非const类型，返回非常量迭代器</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> vec<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//m_iter = vec.begin();</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//template &lt;typename T></span><span class="token comment" spellcheck="true">//class Vector&lt;const T>  // c++ 98/03 只能特化两个版本来进行匹配，代码量巨大</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//public:</span><span class="token comment" spellcheck="true">//    typename T::const_iterator m_iter;</span><span class="token comment" spellcheck="true">//    void get(const T&amp; vec)</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        m_iter = vec.begin();</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//};</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> newType <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">using</span> newType_c <span class="token operator">=</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">;</span>    newType vec <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    newType_c vec_c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    Vector<span class="token operator">&lt;</span>newType<span class="token operator">></span> Vec1<span class="token punctuation">;</span>    Vector<span class="token operator">&lt;</span>newType_c<span class="token operator">></span> Vec2<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> Vec1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> Vec2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>vec_c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多内容参考:  <a href="https://en.cppreference.com/w/cpp/language/auto">https://en.cppreference.com/w/cpp/language/auto</a></p><h2 id="1-2、模板类型推导"><a href="#1-2、模板类型推导" class="headerlink" title="1.2、模板类型推导"></a>1.2、模板类型推导</h2><p>在C++11中可以将模板参数分为下面几种情况</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// T parm： 模板参数类型是T</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_r</span><span class="token punctuation">(</span>T parm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T&amp; parm： 模板参数类型是一个引用</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_r</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> parm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T&amp;&amp; parm： 模板参数类型是一个通用引用</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_rr</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> parm<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板类型推导时，不论模板参数如何，所有有引用的实参会被视为无引用<br><strong>当模板参数类型是一个T类型时</strong></p><ul><li>此时为值拷贝传参， 实参入栈，形参在自己的栈帧里拷贝实参内容到自己</li><li>如果实参有 const 或 volatile属性(简称cv)，都会被忽略</li></ul><p><strong>当模板参数类型是一个引用或指针时</strong></p><ul><li>实参入栈，形参为指针或引用作为新栈帧的一个局部变量，占4字节或8字节，指向实参（ebp+8）</li><li>如果实参有 const 或 volatile属性，都会被保留</li></ul><p><strong>当模板参数类型是一个通用引用时</strong></p><ul><li>传入参数是lvalue，被推导为左值引用，传入参数为rvalue被推导为右值引用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;boost/type_index.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> boost<span class="token operator">::</span>typeindex<span class="token operator">::</span>type_id_with_cvr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Effective Modern C++有介绍：可以查看编译器的模板推导类型结果</span><span class="token comment" spellcheck="true">// 注意：模板类型推导时，不论模板参数如何，所有有引用的实参会被视为无引用</span><span class="token comment" spellcheck="true">// T parm： 模板参数类型是T, 传值</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_v</span><span class="token punctuation">(</span>T parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> parm <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// T parm： 两个参数模板参数类型是T,int 传值</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token operator">></span><span class="token keyword">int</span> <span class="token function">func_arr</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>parm<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"N = "</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> N<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// T&amp; parm： 模板参数类型是一个引用或指针时</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_r</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// T&amp;&amp; parm： 模板参数类型是一个通用引用</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_rr</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> cx <span class="token operator">=</span> x<span class="token punctuation">;</span>     <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> crx <span class="token operator">=</span> cx<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str1 <span class="token operator">=</span> <span class="token string">"const char* str1"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">"char* const str2"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"const char arr[]"</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 根据实参与给定模板推测模板T的类型</span>                  <span class="token comment" spellcheck="true">// T 类型              实参</span>    <span class="token function">func_v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// T ->  int             [无变动]</span>    <span class="token function">func_v</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// T ->  int             [无变动]</span>    <span class="token function">func_v</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// T ->  int            [忽略const]</span>    <span class="token function">func_v</span><span class="token punctuation">(</span>crx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T ->  int            [忽略const &amp;]</span>    <span class="token function">func_v</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T -> const char*   [const修饰的是内容，不是指针变量，所以不忽略]</span>    <span class="token function">func_v</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T -> const char*   </span>    <span class="token function">func_v</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T -> char*         [忽略const]</span>    <span class="token function">func_v</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T -> const char*   [编译时退化为指针]</span>    <span class="token function">func_arr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T -> const char  N = 17  </span>    <span class="token function">func_v</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T -> void (__cdecl*)(void)</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">func_r</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// T = int        parm : int &amp; </span>    <span class="token function">func_r</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// T = int const  parm : int const &amp;    [保留const]</span>    <span class="token function">func_r</span><span class="token punctuation">(</span>crx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T = int const  parm : int const &amp;    [忽略&amp;]</span>    <span class="token function">func_r</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T -> const char (&amp;) [17]              </span>    <span class="token function">func_r</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// parm: void (__cdecl&amp;)(void)         </span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">func_rr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// x是lvalue， T -> int&amp;         parm : int&amp; &amp;&amp; -> int&amp;</span>    <span class="token function">func_rr</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cx是lvalue，T -> const int&amp;   parm : const int&amp; &amp;&amp; -> const int&amp;</span>    <span class="token function">func_rr</span><span class="token punctuation">(</span>crx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rx是lvalue，T -> const int&amp;   parm : const int&amp; &amp;&amp; -> const int&amp;</span>    <span class="token function">func_rr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 10是rvalue，T -> int          parm : int&amp;&amp; </span>    <span class="token function">func_rr</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     T -> int          parm : int&amp;&amp; </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3、auto类型推导原理"><a href="#1-3、auto类型推导原理" class="headerlink" title="1.3、auto类型推导原理"></a>1.3、auto类型推导原理</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;boost/type_index.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> boost<span class="token operator">::</span>typeindex<span class="token operator">::</span>type_id_with_cvr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T parm </span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_v</span><span class="token punctuation">(</span>T parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"auto == T == "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const T parm </span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_cv</span><span class="token punctuation">(</span><span class="token keyword">const</span> T parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"auto == T == "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// T&amp; parm </span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_rv</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"auto == T == "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const T&amp; parm </span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_crv</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"auto == T == "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_cp</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">*</span> parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"auto == T == "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func_pc</span><span class="token punctuation">(</span>T<span class="token operator">*</span> <span class="token keyword">const</span> parm<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"auto == T == "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ParmType: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 把auto替换为T就是要匹配的模板类型， 右操作数被当作实参，左侧部分被当作模板函数</span>    <span class="token keyword">auto</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配 T parm     </span>    <span class="token function">func_v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T -> int    ParmType: int    </span>    <span class="token keyword">const</span> <span class="token keyword">auto</span> cx <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配 const T parm    </span>    <span class="token function">func_cv</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// T == int</span>    <span class="token keyword">auto</span><span class="token operator">&amp;</span> rcx <span class="token operator">=</span> cx<span class="token punctuation">;</span>       <span class="token function">func_rv</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//  T == int const </span>    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> crx <span class="token operator">=</span> cx<span class="token punctuation">;</span>      <span class="token function">func_rv</span><span class="token punctuation">(</span>rcx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  T == int const</span>    <span class="token keyword">auto</span> x2 <span class="token operator">=</span> cx<span class="token punctuation">;</span>      <span class="token function">func_v</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// T == int</span>    <span class="token keyword">auto</span> x3 <span class="token operator">=</span> crx<span class="token punctuation">;</span>             <span class="token function">func_v</span><span class="token punctuation">(</span>crx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T == int</span>    <span class="token keyword">auto</span> x4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">func_v</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T == int *      </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1-----"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wss"</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">;</span>           <span class="token keyword">auto</span><span class="token operator">&amp;</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>        <span class="token function">func_v</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// T == char const *     ParmType: char const *</span>    <span class="token function">func_rv</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T == char const [4]   ParmType: char const (&amp;)[4]</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2-----"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span> f1 <span class="token operator">=</span> test<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 匹配模板：T parm</span>    <span class="token keyword">auto</span><span class="token operator">&amp;</span> f2 <span class="token operator">=</span> test<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 匹配模板：T&amp; parm</span>    <span class="token function">func_v</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  T == void (__cdecl*)(int,int) ParmType: void (__cdecl*)(int,int)</span>    <span class="token function">func_rv</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  T == void __cdecl(int,int)    ParmType: void (__cdecl&amp;)(int,int)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3-----"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span> str0 <span class="token operator">=</span> <span class="token string">"00"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span> str1 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 匹配模板：const T parm</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">*</span> str2 <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 匹配模板：const T* parm</span>    <span class="token keyword">auto</span><span class="token operator">*</span> <span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token string">"3"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 匹配模板：T* const parm</span>    <span class="token function">func_v</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">func_cv</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">func_cp</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">func_pc</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// int n1{ 0 };</span>    <span class="token keyword">auto</span> n2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右操作数发生了隐式类型转换</span>    <span class="token keyword">auto</span> n3<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 和上面区别一下</span>    <span class="token function">func_v</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T == class std::initializer_list&lt;int>   ParmType: class std::initializer_list&lt;int></span>    <span class="token function">func_v</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T == int  ParmType: int</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值类别、右值引用、移动构造、完美转发</title>
      <link href="2020/12/21/zhi-lei-bie-you-zhi-yin-yong-yi-dong-gou-zao-wan-mei-zhuan-fa/"/>
      <url>2020/12/21/zhi-lei-bie-you-zhi-yin-yong-yi-dong-gou-zao-wan-mei-zhuan-fa/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="1、值类别"><a href="#1、值类别" class="headerlink" title="1、值类别"></a>1、值类别</h2><h3 id="1-1、右值引用的引入"><a href="#1-1、右值引用的引入" class="headerlink" title="1.1、右值引用的引入"></a>1.1、右值引用的引入</h3><p>引用的本质</p><ul><li>编译器隐藏了引用变量内部保存引用对象的地址的事实</li><li>引用变量也可以使用const修饰：const引用 和 non-const引用</li><li>const引用代表编译器层面禁止修改引用变量的值（不能再直接出现在赋值符号左边），但依然可以间接修改</li></ul><p>左值引用（<code>int&amp;</code>）</p><ul><li>左值引用可以引用一个lvalue（<code>int&amp; r = i</code>） </li><li>non-const左值引用不能引用一个prvalue(纯右值)，const左值引用可以绑定到一个prvalue(如：<code>const int&amp; r = 10; const Test&amp; = Test();</code>)</li></ul><p>右值引用(<code>int&amp;&amp;</code>)</p><ul><li>右值引用使得non-const引用变量能够引用prvalue（<code>int&amp;&amp; r = 10</code>），新特性解决了C++98/03的不足，且兼容</li><li>反汇编发现：右值引用和const左值引用生成的汇编代码完全一致</li><li>右值引用不能用来引用一个lvalue<ul><li>可以使用 <code>static_cast&lt;int&amp;&amp;&gt;(lvalue)</code>  将lvalue转为xvalue，这样就可以引用了</li><li><code>std::move()</code> 封装了 上述的强制类型转换过程，并赋予了新的语义（即期望临时对象资源被转移，本身不提供转移资源功能）</li></ul></li><li>临时对象的生命只有一行，右值引用能够有效的利用临时对象持有的系统资源，实现资源转移，避免不必要的大量复制<ul><li>函数传参可能传入临时对象，在C++98/03中会使用<code>const Test&amp;</code> 接收，虽可以自主选择拷贝资源或转移资源，但倾向于深拷贝资源</li><li>C++11在兼容过去的同时，可以使用右值引用接收实参，倾向于自己将要转移资源，而不是拷贝（虽然也可以，但不这样干）</li></ul></li><li>注意：转移资源后应该断开临时对象释放资源的句柄，临时对象才可以安全析构</li></ul><h3 id="1-2、值类别（value-categories）"><a href="#1-2、值类别（value-categories）" class="headerlink" title="1.2、值类别（value categories）"></a>1.2、值类别（value categories）</h3><p>明确表达式概念</p><ul><li>表达式是_运算符_及其_操作数_的序列，语句是指一条语句，以分号作为结束标志</li><li>因此一条语句可能不止一个表达式。如：<code>int a = func(100);   a = (a &gt; b);   a = ((a &gt; b ? a : b) == a) ? a : b</code>;</li><li>构造函数的直接调用创建临时对象，属于函数调用，因此也是表达式。T var = T();  由两个表达式组成，T()是子表达式</li></ul><p>每个C++表达式都有两个独立的属性: 类型 （type）和 值类别（value categories）</p><ul><li>类型：用来表示表达式结果类型的属性<ul><li>可以使用decltype推测表达式结果值的类型。如：<code>decltype((x)) 、decltype(x = 10) </code></li></ul></li><li>值类别：用来描述表达式结果值的一个属性，通过表达式的值对表达式进行分类<ul><li>在最早的C中，lvalue是指 赋值符号左边的操作数，后来C中的 lvalue 代表locator value，用作定位标识对象</li><li>C++11之前只有两类，lvalue 和 rvalue （概念不够明确且有争议）</li><li>C++11引入移动语义的引入，值类别被重新定义，引入了 prvalue（纯右值）, xvalue（将亡值）, glvalue（泛左值）的概念<ul><li>prvalue 和 xvalue 可称为 rvalue</li><li>lvalue 和 xvalue 可称为 glvalue</li><li>每个表达式的值类别可以是 lvalue，xvalue 或 prvalue中的一个，或者说是 rvalue、glvalue中的一个</li><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1565164/1608353466622-4db36e6f-cf30-4e6c-ac0c-b2c319ec23f3.png#align=left&amp;display=inline&amp;height=91&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=92&amp;originWidth=379&amp;size=15235&amp;status=done&amp;style=none&amp;width=374" alt="image.png"></li></ul></li><li>定义<ul><li>have identity and cannot be moved from are called <em>lvalue</em> expressions;</li><li>have identity and can be moved from are called <em>xvalue</em> expressions;</li><li>do not have identity and can be moved from are called <em>prvalue</em> (“pure rvalue”) expressions;</li><li>个人理解的 have identity：程序中有对象的名字，指针或引用（直接表现出来的，而不是通过重载间接获得）<ul><li>如：const int&amp; i = 10；// 10是prvalue， 中间会被转换为xvalue，被 i 引用</li></ul></li><li><img src="https://cdn.nlark.com/yuque/0/2020/png/1565164/1608352358168-fcd1c86f-2b4b-4e77-b5f5-61b268967bff.png#align=left&amp;display=inline&amp;height=209&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=272&amp;originWidth=711&amp;size=80634&amp;status=done&amp;style=none&amp;width=547" alt="image.png"></li></ul></li><li>rvalue特性<ul><li>内置地址运算符不能获取rvalue的地址。如：&amp;10； &amp;Test();   &amp;(Test().a);  都是错误的（Test类重载&amp;可以返回this，但没用）</li><li>rvalue可用于初始化const左值引用，在这种情况下，由rvalue标识的对象的生存期将延长，直到引用范围终止</li><li>rvalue不能用作内置赋值或复合赋值运算符的左侧操作数。如：Test().a = 10; 10+=10;  都是错误的，注意Test() = Test()调用的类中重载的赋值操作符</li><li>rvalue可用于初始化右值引用，在这种情况下，由rvalue标识的对象的生存期将延长，直到引用范围终止</li><li>当用作函数参数且有两个重载的函数（ 一个右值引用参数和一个const左值引用参数）时, 右值将绑定到右值引用的哪个函数（因此，如果存在移动构造和拷贝构造，一个rvalue参数调用移动构造函数）</li></ul></li></ul></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> g<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> <span class="token function">xvalue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Test* operator &amp; (){ return this; }</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 猜测：lvalue表达式的结果为lvalue，所以下面语句a是变量，再后来a又是lvalue</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// lvalue表达式 ，10是prvalue，a是变量。</span>    <span class="token keyword">bool</span> f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lvalue表达式，f是变量，false是prvalue</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> l <span class="token operator">=</span> a<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// lvalue表达式， l是左值引用变量，a是lvalue</span>    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> r <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// lvalue表达式 ，r是右值引用变量，10是prvalue</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// lvalue表达式</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lvalue表达式 ，b是变量, func()也是lvalue表达式且表达式类型是int&amp;</span>    b <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lvalue表达式, static_cast&lt;int&amp;>(a)也是一个lvalue表达式</span>    a <span class="token operator">=</span> r<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// lvalue表达式，r是lvalue, a是lvalue</span>    a <span class="token operator">+</span><span class="token operator">=</span> r<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// lvalue表达式</span>    <span class="token operator">++</span>a<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// lvalue表达式</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lvalue表达式 ，(a, r)是一个lvalue表达式,其中r是一个lvalue</span>    <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这也是一个特殊的lvalue</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "World"是lvalue, arr[i]是变量</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 'a'是prvalue，可修改的原因是存储于只读存储区的字符串被拷贝一份到栈内</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// lvalue表达式，(a &lt; b)是一个prvalue表达式，(a &lt; b)子表达式产生的结果为一个布尔值</span>    <span class="token comment" spellcheck="true">// 下面一行所有的表达式产生的结果都是prvalue, 他们都是prvalue表达式</span>    a<span class="token operator">++</span><span class="token punctuation">;</span> a<span class="token operator">--</span><span class="token punctuation">;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span> a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span> a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">;</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span> <span class="token operator">!</span>a<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span> a <span class="token operator">>=</span> b<span class="token punctuation">;</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    Test t <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lvalue表达式，Test()是prvalue表达式</span>    t <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// lvalue表达式。Test()是prvalue表达式，std::move(Test())是xvalue表达式</span>    d <span class="token operator">=</span> <span class="token function">xvalue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// lvalue表达式，xvalue()是一个xvalue表达式且表达式类型为int&amp;&amp;</span>    d <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lvalue表达式，static_cast&lt;int&amp;&amp;>(g)是xvalue表达式</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 整体是lvalue表达式，Test()是一个rvalue, Test().a是一个xvalue表达式</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 只列举部分。完整的可以查阅：https://en.cppreference.com/w/cpp/language/value_category</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3、值类别的转换"><a href="#1-3、值类别的转换" class="headerlink" title="1.3、值类别的转换"></a>1.3、值类别的转换</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. lvalue->prvalue</span>    a <span class="token operator">=</span> f<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 实际是语句会被分为两条指令</span>    <span class="token comment" spellcheck="true">// movzx  eax, byte ptr [f]  </span>    <span class="token comment" spellcheck="true">// mov    dword ptr[a], eax</span>    <span class="token comment" spellcheck="true">// 发现这里发生了转换（lvalue->prvalue 或 gvalue->prvalue）</span>    <span class="token comment" spellcheck="true">// 2. prvalue->xvalue</span>    <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ci <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本质为将10放到一个临时局部变量里，引用变量引用局部变量，编译器层面禁止直接修改这个隐藏的局部变量,可以修改这个局部变量: const_cast&lt;int&amp;>(ci) = 20</span>    <span class="token comment" spellcheck="true">//const Test&amp; tt = Test(10);</span>    <span class="token comment" spellcheck="true">// 实际是语句会被分为三条指令</span>    <span class="token comment" spellcheck="true">// mov  dword ptr [ebp-54h],0Ah  </span>    <span class="token comment" spellcheck="true">// lea  eax, [ebp - 54h]</span>    <span class="token comment" spellcheck="true">// mov  dword ptr[ci], eax</span>    <span class="token comment" spellcheck="true">// 存在引用，引用了这个临时变量，所以有identify</span>    <span class="token comment" spellcheck="true">// 发生了prvalue->xvalue的转化</span>    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> rr <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mov  dword ptr[ebp - 3Ch], 0Ah</span>    <span class="token comment" spellcheck="true">// lea  eax, [ebp - 3Ch]</span>    <span class="token comment" spellcheck="true">// mov  dword ptr[rr], eax</span>    <span class="token comment" spellcheck="true">// 发现和const int&amp; ci = 10;的汇编语句几乎一致，只是编译时ci不能再作为左操作数</span>    <span class="token comment" spellcheck="true">// 也发生了prvalue->xvalue的转化</span>    rr <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果使用const右值引用，使得编译器层面禁止修改引用变量</span>    <span class="token comment" spellcheck="true">// 3. lvalue->xvalue</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> l_ref <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// lea  eax, [a]</span>    <span class="token comment" spellcheck="true">// mov  dword ptr[l_ref], eax</span>    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> r_ref <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// lea  eax, [a]</span>    <span class="token comment" spellcheck="true">// mov  dword ptr[r_ref], eax</span>    <span class="token comment" spellcheck="true">// 右值引用本就和移动语义息息相关，使用右值引用应该就是想move，如果不move, 用const左值引用不香吗？</span>    <span class="token comment" spellcheck="true">// static_cast&lt;int&amp;&amp;>(a);是xvalue表达式</span>    <span class="token comment" spellcheck="true">// static_cast&lt;int&amp;>(a);是lvlaue表达式</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、右值引用、移动构造与移动赋值"><a href="#2、右值引用、移动构造与移动赋值" class="headerlink" title="2、右值引用、移动构造与移动赋值"></a>2、右值引用、移动构造与移动赋值</h2><p>右值引用实现资源转移</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向系统的堆资源</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// explicit</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_pvalue <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token operator">*</span>m_pvalue <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> m_pvalue<span class="token punctuation">;</span>        m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 资源的拷贝</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_pvalue<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 资源的转移</span>        obj<span class="token punctuation">.</span>m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span>Test<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"void move(Test&amp;&amp; obj)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_pvalue<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 资源的转移</span>        obj<span class="token punctuation">.</span>m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Test op<span class="token punctuation">;</span>    op<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     op<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Test <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    op<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// std::move(tmp)为xvalue表达式，当rvalue用作函数参数且有两个重载的函数（ 一个右值引用参数和一个const左值引用参数）时</span>    <span class="token comment" spellcheck="true">// 右值将绑定到右值引用的那个函数（因此，如果存在移动构造和拷贝构造，rvalue参数调用移动构造函数）</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token string">" == -1 说明资源被转移了"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++11引入了移动构造函数与赋值构造函数</p><ul><li>拷贝构造函数可以接收 lvalue 和 rvalue，但它实现的本义倾向于资源的深拷贝</li><li>移动构造函数参数为右值引用，可以是const或非const右值引用，本义倾向于资源转移，一个类可以具有多个移动构造函数</li><li><a href="https://en.cppreference.com/w/cpp/language/move_constructor">https://en.cppreference.com/w/cpp/language/move_constructor</a></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// explicit</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Constructor "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy Constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_pvalue <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token operator">*</span>m_pvalue <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy Assignment operator"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Test() : "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_pvalue<span class="token punctuation">;</span>        m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 移动构造</span>    <span class="token function">Test</span><span class="token punctuation">(</span>Test<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_pvalue</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>m_pvalue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move Constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 移动赋值</span>    Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move Assignment operator"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>m_pvalue<span class="token punctuation">;</span>            <span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Test <span class="token function">t0</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// Constructor</span>    Test t1 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Constructor + Move Constructor + ~Test() : -1 rvalue优先匹配移动构造(右值引用 )</span>    Test t2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>t0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Move Constructor</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>t0 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// -1</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>t1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 100</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>t2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 50</span>    t0 <span class="token operator">=</span> t1<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// Copy Assignment operator</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>t0 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>t1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 100 100</span>    t0 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Move Assignment operator</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>t0 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>t1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 100 -1</span>    string s1 <span class="token operator">=</span> <span class="token string">"wss"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// wss   0xbfbcf4ac</span>    string s2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用basic_string(basic_string&amp;&amp; __str)窃取资源</span>    cout <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ""    0xbfbcf4ac</span>    cout <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// wss    0xbfbcf4dc  </span>    <span class="token comment" spellcheck="true">// 发现移动构造后字符串的地址发生了改变，说明string的移动构造还是会执行深拷贝，效率不高</span>    string<span class="token operator">&amp;&amp;</span> s3 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    s3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello    0xbfbcf4dc</span>    cout <span class="token operator">&lt;&lt;</span> s3<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello    0xbfbcf4dc</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1565164/1608110040520-14b8bcb9-404a-4fbf-ad0a-abdaca2c807c.png#align=left&amp;display=inline&amp;height=314&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=380&amp;originWidth=797&amp;size=51832&amp;status=done&amp;style=none&amp;width=658" alt="image.png"></p><h2 id="3、返回值优化-RVO"><a href="#3、返回值优化-RVO" class="headerlink" title="3、返回值优化(RVO)"></a>3、返回值优化(RVO)</h2><ul><li>RVO：返回值优化（Return Value Optimization），C++98已经支持的特性，是一个编译优化技术<ul><li>函数返回时不调用拷贝构造或移动构造操作生成临时对象（省去了函数返回时的拷贝构造或移动构造）</li><li>初始化对象时不创建只用于初始化相同类型的另一个对象的临时对象</li><li>g++编译器指定 -fno-elide-constructors 选项可以禁用该优化</li></ul></li><li>NRVO: 命名返回值优化（Named Return Value Optimization），RVO的升级<ul><li>RVO是对匿名对象（临时对象）的优化，NRVO可以支持有名对象优化</li></ul></li><li>后文不严格区分两者，只当作是一种RVO优化技术</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// explicit</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Constructor "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy Constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_pvalue <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token operator">*</span>m_pvalue <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy Assignment operator"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Test() : "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span> m_pvalue<span class="token punctuation">;</span>        m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 移动构造</span>    <span class="token function">Test</span><span class="token punctuation">(</span>Test<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_pvalue</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>m_pvalue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move Constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 移动赋值</span>    Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move Assignment operator"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_pvalue <span class="token operator">=</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>m_pvalue<span class="token punctuation">;</span>            <span class="token keyword">const_cast</span><span class="token operator">&lt;</span>Test<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>m_pvalue <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Test <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"getA()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">0xAAA</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C++98/03 关闭RVO时：生成临时对象Test(0xAAA)，函数返回，调用拷贝构造再次生成临时对象Test(0xAAA)，供调用者使用</span><span class="token punctuation">}</span>Test <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"getB()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Test <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token number">0xBBB</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有名对象</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C++98/03 关闭RVO：函数返回时调用拷贝构造生成临时对象，析构tmp</span><span class="token punctuation">}</span>Test<span class="token operator">&amp;&amp;</span> <span class="token function">getC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"getC()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Test <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token number">0xCCC</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生成局部对象</span>    <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 由于返回值类型为右值引用，所以不会再调用拷贝构造或移动构造</span>    <span class="token comment" spellcheck="true">// 这种错误和返回局部对象的左值引用或局部对象的指针原理一样。函数执行完栈帧销毁，局部对象失效</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* vs2015执行过程(默认开启了RVO) */</span>    Test <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为t1分配内存（call Test::__autoclassinit2），再调用构造函数初始化</span>    Test t2 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    Test t3 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Test <span class="token function">t4</span><span class="token punctuation">(</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启RVO时，上方四条语句都仅调用一次普通构造，生成的汇编代码完全一致，说明没有生成Test(8)临时对象</span>    <span class="token comment" spellcheck="true">// 关闭RVO时，t2,t3,t4调用了 普通构造 + 拷贝构造/移动构造 + 析构函数，说明生成了Test(8)临时对象</span>    <span class="token comment" spellcheck="true">// 当编译选项使用c++17时，是否开启RVO, 都只调用普通构造</span>    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Test t5 <span class="token operator">=</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译器行为：为t5分配内存，将t5内存地址传入eax寄存器，eax入栈，在A函数中调用构造函数进行初始化t5</span><span class="token comment" spellcheck="true">// 使用函数返回值初始化结构体变量时：用eax存变量地址，eax入栈，返回地址入栈，调用函数，新函数将变量地址（ebp+8）赋给ecx，再调用构造函数</span>    Test <span class="token function">t6</span><span class="token punctuation">(</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 开启RVO时, 上方两条语句都只调用一次普通构造，说明没有生成临时对象</span>    <span class="token comment" spellcheck="true">// 关闭RVO时，都调用了 普通构造 + (移动构造+移动构造) / (拷贝构造+拷贝构造)</span>    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Test t7 <span class="token operator">=</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// NRVO</span>    <span class="token comment" spellcheck="true">// 为t7分配内存，将t7地址传入eax寄存器, eax入栈，调用B函数，B函数中为tmp申请内存，调用构造函数初始化tmp,</span>    <span class="token comment" spellcheck="true">// 再通过t7地址（ebp+8赋给ecx）调用移动构造函数，进行资源转移（或拷贝构造进行资源拷贝）</span>    Test <span class="token function">t8</span><span class="token punctuation">(</span><span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启RVO时, 上方两条语句都调用一次普通构造 + 移动构造/拷贝构造</span>    <span class="token comment" spellcheck="true">//（gcc下只会调用一次普通构造, 使用objdump-S反汇编发现函数B在前言部分将t8地址(ebp+8)赋给了局部变量，局部变量又赋给ecx,调用构造函数初始化tmp其实初始化的是ecx指向的t8）</span>    <span class="token comment" spellcheck="true">// 关闭RVO时，都调用了 普通构造 + (移动构造+移动构造) / (拷贝构造+拷贝构造)</span>    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    t7 <span class="token operator">=</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对于这种不是初始化的操作，必须得执行赋值操作，为啥？因为赋值操作函数可能需要执行一些其他操作(如释放资源等），肯定不能优化掉</span>    <span class="token comment" spellcheck="true">// 编译器会选择一个局部变量的地址x入栈，A函数在x初始化对象, 通过eax返回对象地址，ecx存放t7地址，调用移动赋值操作</span>    t5 <span class="token operator">=</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 和上面做法类似</span>    <span class="token comment" spellcheck="true">// 开启RVO时, t7所在行调用了普通构造 + 移动赋值/拷贝赋值， t8所在行调用了普通构造 + 移动构造/拷贝构造 + 移动赋值/拷贝赋值（gcc依旧会少了一个，原理前面解释过了）</span>    <span class="token comment" spellcheck="true">// 关闭RVO时，都调用了 普通构造 + 移动构造/拷贝构造 + 移动赋值/拷贝赋值</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; endl &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//t5 = getC();</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; *t5 &lt;&lt; endl; // error 段错误或垃圾数据</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1565164/1608135908581-cdd3e220-9771-40a4-86dd-a29e5e067b14.png#align=left&amp;display=inline&amp;height=691&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=691&amp;originWidth=1443&amp;size=178897&amp;status=done&amp;style=none&amp;width=1443" alt="image.png"></p><h2 id="4、万能引用与引用折叠"><a href="#4、万能引用与引用折叠" class="headerlink" title="4、万能引用与引用折叠"></a>4、万能引用与引用折叠</h2><p>模板函数传参时编译器推导时可能遇到下面四种特殊情况</p><ul><li>左值引用 + 右值引用   int&amp;  &amp;&amp;          -&gt;  int&amp;           </li><li>左值引用 + 左值引用   int&amp;  &amp;            -&gt;   int&amp;</li><li>右值引用 + 左值引用   int&amp;&amp;  &amp;          -&gt;  int&amp;</li><li>右值引用 + 右值引用   int&amp;&amp;  &amp;&amp;       -&gt;  int&amp;&amp;</li><li>编译器采用引用折叠，规则： 如果有左值引用那么就折叠为左值引用，否者就是右值引用</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;boost/type_index.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> boost<span class="token operator">::</span>typeindex<span class="token operator">::</span>type_id_with_cvr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Effective Modern C++有介绍：可以查看编译器的模板推导类型结果</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> parm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这样写就是万能引用：参数传递lvalue就是左值引用,传递rvalue就是右值引用</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"parm: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> N<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"T: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"arr: "</span> <span class="token operator">&lt;&lt;</span> type_id_with_cvr<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pretty_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lvalue <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> l_ref <span class="token operator">=</span> lvalue<span class="token punctuation">;</span>      <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wss"</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// ==> func&lt;int>(10); -> int&amp;&amp;  实参是rvalue所以形参是右值引用</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token function">func</span><span class="token punctuation">(</span>lvalue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> func&lt;int&amp;>(lvalue); -> int&amp; &amp;&amp;  ->引用折叠 -> int&amp;   实参是lvalue，所以形参是左值引用</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 参数为rvalue时, 组合为 int&amp;&amp; ; lvalue时 T被推导为int&amp;, 组合为int&amp; &amp;&amp; -> int&amp;</span>    <span class="token comment" spellcheck="true">// 实参左rvalue, 形参就为右值引用，实参为lvaue时形参就为左值引用</span>    <span class="token comment" spellcheck="true">// 也就是说万能引用够判断原始实参为lvalue还是rvalue，是实现完美转发的关键</span>    <span class="token function">func</span><span class="token punctuation">(</span>l_ref<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// func&lt;const int&amp;>(l_ref);  -> const int&amp;   const左值引用</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">f1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// f1&lt;char, 4>() -> char (&amp;)[4]  左值引用</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// func&lt;char(&amp;)[4]>(arr);   左值引用</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1565164/1608180753863-07a7b64c-a79f-4b22-8a82-fcd3ca7ab7bf.png#align=left&amp;display=inline&amp;height=312&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=312&amp;originWidth=308&amp;size=10788&amp;status=done&amp;style=none&amp;width=308" alt="image.png"></p><h2 id="5、完美转发"><a href="#5、完美转发" class="headerlink" title="5、完美转发"></a>5、完美转发</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> t1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> t2<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"void func(int&amp;&amp; t1, int&amp; t2)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    t2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> F<span class="token punctuation">,</span> <span class="token keyword">typename</span> T1<span class="token punctuation">,</span> <span class="token keyword">typename</span> T2<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>F func<span class="token punctuation">,</span> T1<span class="token operator">&amp;&amp;</span> t1<span class="token punctuation">,</span> T2<span class="token operator">&amp;&amp;</span> t2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// func(t1, t2);  </span>    <span class="token comment" spellcheck="true">// 直接调用上面函数会报错，不完美</span>    <span class="token comment" spellcheck="true">// 原因：t1为右值引用，实参为rvalue时，完全合理，但t1为一个lvalue，lvalue作为实参传给func右值引用形参,出错</span>    <span class="token comment" spellcheck="true">// 需要的特性：原来是rvalue,再次传参还是rvalue，lvalue也是</span>    <span class="token comment" spellcheck="true">// 解决：把lvalue转变为xvalue，之前就提过可以使用static_cast, move</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>T1<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>T2<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">func</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标准库提供std::forward来保持左值或右值</span>    <span class="token function">func</span><span class="token punctuation">(</span>std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>T1<span class="token operator">></span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>T2<span class="token operator">></span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    test<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 0是rvalue ，k是lvalue ，编译器推导T1 = int, T2 = int&amp;, F已显式指定为void(int&amp;&amp;, int&amp;)</span>    cout <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> r1 <span class="token operator">=</span> std<span class="token operator">::</span>forward<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//int&amp;&amp; r2 = std::forward&lt;int&amp;>(k); // error int&amp; &amp;&amp; -> int&amp; 所以r2需要为int&amp;类型</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>std::move 与 std::forward源码分析</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/// remove_reference</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span><span class="token keyword">struct</span> remove_reference <span class="token punctuation">{</span> <span class="token keyword">typedef</span> _Tp   type<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span> <span class="token keyword">struct</span> remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">typedef</span> _Tp   type<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span><span class="token keyword">struct</span> remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">typedef</span> _Tp   type<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发现std::remove_reference&lt;_Tp>的作用是删除引用类型，并通过type别名返回无引用的类</span><span class="token comment" spellcheck="true">/**   *  @brief  Convert a value to an rvalue.   *  @param  __t  A thing of arbitrary type.   *  @return The parameter cast to an rvalue-reference to allow moving it.  */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>_Tp<span class="token operator">&amp;&amp;</span> __t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**   *  @brief  Forward an lvalue.   *  @return The parameter cast to the specified type.   *   *  This function is used to implement "perfect forwarding".   */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span><span class="token keyword">constexpr</span> _Tp<span class="token operator">&amp;&amp;</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;</span> __t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   *  @brief  Forward an rvalue.   *  @return The parameter cast to the specified type.   *   *  This function is used to implement "perfect forwarding".   */</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span><span class="token keyword">constexpr</span> _Tp<span class="token operator">&amp;&amp;</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;&amp;</span> __t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>      <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token operator">!</span>std<span class="token operator">::</span>is_lvalue_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>value<span class="token punctuation">,</span> <span class="token string">"template argument"</span>            <span class="token string">" substituting _Tp is an lvalue reference type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>_Tp<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/20/hello-world/"/>
      <url>2020/12/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;int main(){    cout << "Hello" << endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
